pipeline {
    agent any
    tools {
        terraform 'terraform-Rag'
    }
    parameters {
        choice choices: ['Production', 'Development'], description: '''Select the AWS account
        ''', name: 'Account'
        choice choices: ['us-east-1', 'ap-south-1', 'eu-central-1'], description: '''Select the region
        ''', name: 'Region'
        choice choices: ['Ragesh', 'Moiz', 'Sourabh','Ramesh'], description: '''Server owner
        ''', name: 'Owner'
        choice choices: ['DEV-GROUP', 'IT-GROUP','UK Support','US Support'], description: '''Server Group
        ''', name: 'Group'
        string defaultValue: '', description: 'Project', name: 'Project', trim: false
        choice choices: ['Ragesh', 'Ashley'], description: '''Select the User who requested for workspace. 
        ''', name: 'User'
        booleanParam(name: 'autoApprove', defaultValue: false, description: 'Automatically run apply after generating plan?')
        
    }
    
    stages {
        stage('Git Checkout'){
                steps{
                   git branch: 'main', credentialsId: 'GITHUB-RAGEH', url: 'https://github.com/Rageshmookoth/aws-workspace1.git'
                }
            }
     
        stage('Plan Production') {
            
            when {
                        expression { params.Account == 'Production' }
                    }
               environment {
                     AWS_ACCESS_KEY_ID     = credentials('PROD-AWS-ACCESS-KEY-ID')
                     AWS_SECRET_ACCESS_KEY = credentials('PROD-AWS-SECRET-KEY')
               }
            steps {
                //script {
                //    currentBuild.displayName = params.version
                //}
                sh 'terraform init -input=false'
                //sh 'terraform workspace select ${environment}'
                sh "terraform plan -input=false -out tfplan -var 'region=${params.Region}' -var 'User=${params.User}' -var 'Group=${params.Group}' -var 'Owner=${params.Owner}' -var 'Project=${params.Project}'"
                sh 'terraform show -no-color tfplan > tfplan.txt'
            }
        }
        stage('Plan Development') {
            
            when {
                        expression { params.Account == 'Development' }
                    }
               environment {
                     AWS_ACCESS_KEY_ID     = credentials('AWS-ACCESS-KEY-ID')
                     AWS_SECRET_ACCESS_KEY = credentials('AWS-SECRET-KEY')
               }
            steps {
                //script {
                //    currentBuild.displayName = params.version
                //}
                sh 'terraform init -input=false'
                //sh 'terraform workspace select ${environment}'
                sh "terraform plan -input=false -out tfplan -var 'instance_name=${params.ServerName}' -var 'Group=${params.Group}' -var 'Owner=${params.Owner}' -var 'Project=${params.Project}'"
                sh 'terraform show -no-color tfplan > tfplan.txt'
            }
        }

        stage('Approval') {
            when {
                not {
                    equals expected: true, actual: params.autoApprove
                }
            }

            steps {
                script {
                    def plan = readFile 'tfplan.txt'
                    input message: "Do you want to apply the plan?",
                        parameters: [text(name: 'Plan', description: 'Please review the plan', defaultValue: plan)]
                }
            }
        }

        stage('Apply - Development') {
            when {
                        expression { params.Account == 'Development' }
                    }
               environment {
                     AWS_ACCESS_KEY_ID     = credentials('AWS-ACCESS-KEY-ID')
                     AWS_SECRET_ACCESS_KEY = credentials('AWS-SECRET-KEY')
               }
            steps {
                sh "terraform apply -input=false tfplan"
            }
        }
        stage('Apply - Production') {
            when {
                        expression { params.Account == 'Production' }
                    }
               environment {
                     AWS_ACCESS_KEY_ID     = credentials('PROD-AWS-ACCESS-KEY-ID')
                     AWS_SECRET_ACCESS_KEY = credentials('PROD-AWS-SECRET-KEY')
               }
            steps {
                sh "terraform apply -input=false tfplan"
            }
        }
        stage('Remove State file') {
            steps {
                sh "rm -fr terraform.tfstate"
                sh "rm -fr .terraform.lock.hcl"
                sh "rm -fr terraform.tfstate.backup"
            }
        }
         
        
    }
    post {
    success {
        mail to: 'rageshmoorkoth@gmail.com',
             subject: "Server build completed",
             body: "Server name ${params.ServerName}"
    }
}
}
